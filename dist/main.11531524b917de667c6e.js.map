{"version":3,"sources":["webpack:///main.11531524b917de667c6e.js","webpack:///./src/home.js","webpack:///./src/api/userApi.js","webpack:///./src/api/baseUrl.js"],"names":["webpackJsonp","module","exports","__webpack_require__","global","_userApi","getUsers","then","result","usersBody","forEach","user","id","firstName","lastName","document","getElementById","innerHTML","deleteLinks","getElementsByClassName","Array","from","link","onclick","event","element","target","preventDefault","deleteUser","attributes","value","row","parentNode","removeChild","call","this","_interopRequireDefault","obj","__esModule","default","get","del","url","fetch","baseUrl","onSuccess","onError","request","Request","method","response","json","error","console","log","Object","defineProperty","_baseUrl","_baseUrl2","getBaseUrl","getQueryStringParameterByName","name","window","location","href","replace","regex","RegExp","results","exec","decodeURIComponent"],"mappings":"AAAAA,cAAc,IAER,SAASC,EAAQC,EAASC,IAEH,SAASC,GAAS,YCF/CD,GAAA,EACA,IAAAE,GAAAF,EAAA,IAGA,EAAAE,EAAAC,YAAWC,KAAK,SAAAC,GACf,GAAIC,GAAY,EAEhBD,GAAOE,QAAQ,SAAAC,GACdF,yCAC2BE,EAAKC,GADhC,iDAEMD,EAAKC,GAFX,kBAGMD,EAAKE,UAHX,kBAIMF,EAAKG,SAJX,qBAQDV,EAAOW,SAASC,eAAe,SAASC,UAAYR,CAEpD,IAAMS,GAAcd,EAAOW,SAASI,uBAAuB,aAI1DC,OAAMC,KAAKH,EAAa,SAAAI,GACtBA,EAAKC,QAAU,SAASC,GACtB,GAAMC,GAAUD,EAAME,MACtBF,GAAMG,kBACN,EAAAtB,EAAAuB,YAAWH,EAAQI,WAAW,WAAWC,MACzC,IAAMC,GAAMN,EAAQO,WAAWA,UAC/BD,GAAIC,WAAWC,YAAYF,UDMHG,KAAKhC,EAAU,WAAa,MAAOiC,WAI3D,SAASlC,EAAQC,KAKhB,CAED,SAASD,EAAQC,EAASC,GAE/B,YAcA,SAASiC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,UAASF,GElDjF,QAAS/B,KACf,MAAOkC,GAAI,SAGL,QAASZ,GAAWhB,GAC1B,MAAO6B,YAAa7B,GAMrB,QAAS4B,GAAIE,GACZ,MAAOC,OAAMC,EAAUF,GAAKnC,KAAKsC,EAAWC,GAI7C,QAASL,GAAIC,GACZ,GAAMK,GAAU,GAAIC,SAAQJ,EAAUF,GAAOO,OAAQ,UAErD,OAAON,OAAMI,GAASxC,KAAKsC,EAAWC,GAIvC,QAASD,GAAUK,GAClB,MAAOA,GAASC,OAIjB,QAASL,GAAQM,GAChBC,QAAQC,IAAIF,GFSZG,OAAOC,eAAetD,EAAS,cAC9B4B,OAAO,IAER5B,EEzCeI,WF0CfJ,EEtCe0B,aAXhBzB,EAAA,EAGA,IAAAsD,GAAAtD,EAAA,GFoDKuD,EAAYtB,EAAuBqB,GEnDlCb,GAAU,EAAAc,iBFoGT,CAED,SAASzD,EAAQC,GAEtB,YG5Gc,SAASyD,KACvB,MAAOC,GAA8B,cAAgB,wBAA0B,6CAIhF,QAASA,GAA8BC,EAAMnB,GACtCA,IAAKA,EAAMoB,OAAOC,SAASC,MAChCH,EAAOA,EAAKI,QAAQ,UAAW,OAC/B,IAAIC,GAAQ,GAAIC,QAAO,OAASN,EAAO,qBACnCO,EAAUF,EAAMG,KAAK3B,EACzB,OAAK0B,GACAA,EAAQ,GACNE,mBAAmBF,EAAQ,GAAGH,QAAQ,MAAO,MAD5B,GADH,KHoGtBV,OAAOC,eAAetD,EAAS,cAC7B4B,OAAO,IAET5B,aGjHuByD","file":"main.11531524b917de667c6e.js","sourcesContent":["webpackJsonp([0],[\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {'use strict';\n\t\n\t__webpack_require__(1);\n\t\n\tvar _userApi = __webpack_require__(3);\n\t\n\t// make the call then populate a html table of users\n\t// (.) \t=> Represents the current directory. in this case it is javascript-dev-env/src/home\n\t// (..)\t=> Represents the parent directory. in this case it is javascript-dev-env/src\n\t(0, _userApi.getUsers)().then(function (result) {\n\t  var usersBody = \"\";\n\t\n\t  result.forEach(function (user) {\n\t    usersBody += '<tr>\\n\\t\\t<td><a href=\"#\" data-id=\"' + user.id + '\" class=\"deleteUser\">Delete</a></td>\\n\\t\\t<td>' + user.id + '</td>\\n\\t\\t<td>' + user.firstName + '</td>\\n\\t\\t<td>' + user.lastName + '</td>\\n\\t\\t</tr>';\n\t  });\n\t\n\t  global.document.getElementById('users').innerHTML = usersBody;\n\t\n\t  var deleteLinks = global.document.getElementsByClassName('deleteUser');\n\t\n\t  // Must use array.from to create a real array from a DOM collection\n\t  // getElementsByClassname only returns an \"array like\" object\n\t  Array.from(deleteLinks, function (link) {\n\t    link.onclick = function (event) {\n\t      var element = event.target;\n\t      event.preventDefault();\n\t      (0, _userApi.deleteUser)(element.attributes[\"data-id\"].value);\n\t      var row = element.parentNode.parentNode;\n\t      row.parentNode.removeChild(row);\n\t    };\n\t  });\n\t});\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ },\n/* 2 */,\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.getUsers = getUsers;\n\texports.deleteUser = deleteUser;\n\t\n\t__webpack_require__(4);\n\t\n\tvar _baseUrl = __webpack_require__(5);\n\t\n\tvar _baseUrl2 = _interopRequireDefault(_baseUrl);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// *** IMPORTANT ***\n\t// think of this file as a javasript version of the repository pattern\n\t// we are abstracting our web api from our application\n\t// this gives us one place to hanle all our ajax calls\n\t\n\t// this polyfill ensures this code will run in browsers that don't support fetch natively\n\tvar baseUrl = (0, _baseUrl2.default)();\n\t\n\t// we are only exposing 1 public function\n\t\n\t\n\t// this allows the url to change based on environment. i.e. development, qa, production\n\tfunction getUsers() {\n\t\treturn get('users');\n\t}\n\t\n\tfunction deleteUser(id) {\n\t\treturn del('users/' + id);\n\t}\n\t\n\t// private\n\t// this is the call that uses fetch\n\t// all the fetch calls, promise resolution, and error handling are abstracted away behind this call.\n\tfunction get(url) {\n\t\treturn fetch(baseUrl + url).then(onSuccess, onError);\n\t}\n\t\n\t// we can't name this 'delete' because delete is a reserved word\n\tfunction del(url) {\n\t\tvar request = new Request(baseUrl + url, { method: 'DELETE' });\n\t\n\t\treturn fetch(request).then(onSuccess, onError);\n\t}\n\t\n\t// private\n\tfunction onSuccess(response) {\n\t\treturn response.json();\n\t}\n\t\n\t// private\n\tfunction onError(error) {\n\t\tconsole.log(error); // eslint-disable-line no-console\n\t}\n\n/***/ },\n/* 4 */,\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = getBaseUrl;\n\t// we want the application to inteligently point to the proper url when developing/production\n\t// development: point to the mock api\n\t// production: point to the api in express\n\t// this will look at the host name to determine if the application is running in development\n\t// if yes: \tit will point to our mock api hosted on port 3001\n\t// if no: \tit will point to the production api we setup in express\n\tfunction getBaseUrl() {\n\t  return getQueryStringParameterByName('useMockApi') ? 'http://localhost:3000' : 'https://sheltered-sea-32779.herokuapp.com/';\n\t}\n\t\n\t// there are eaiser ways to do this. Use JQuery\n\tfunction getQueryStringParameterByName(name, url) {\n\t  if (!url) url = window.location.href;\n\t  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\n\t  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\n\t      results = regex.exec(url);\n\t  if (!results) return null;\n\t  if (!results[2]) return '';\n\t  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\n\t}\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** main.11531524b917de667c6e.js\n **/","// (.) \t=> Represents the current directory. in this case it is javascript-dev-env/src/home\r\n// (..)\t=> Represents the parent directory. in this case it is javascript-dev-env/src\r\nimport './home.css';\r\nimport {getUsers, deleteUser} from './api/userApi';\r\n\r\n// make the call then populate a html table of users\r\ngetUsers().then(result => {\r\n\tlet usersBody = \"\";\r\n\r\n\tresult.forEach(user => {\r\n\t\tusersBody+= `<tr>\r\n\t\t<td><a href=\"#\" data-id=\"${user.id}\" class=\"deleteUser\">Delete</a></td>\r\n\t\t<td>${user.id}</td>\r\n\t\t<td>${user.firstName}</td>\r\n\t\t<td>${user.lastName}</td>\r\n\t\t</tr>`\r\n\t})\r\n\r\n\tglobal.document.getElementById('users').innerHTML = usersBody;\r\n\r\n\tconst deleteLinks = global.document.getElementsByClassName('deleteUser');\r\n\r\n  // Must use array.from to create a real array from a DOM collection\r\n  // getElementsByClassname only returns an \"array like\" object\r\n  Array.from(deleteLinks, link => {\r\n    link.onclick = function(event) {\r\n      const element = event.target;\r\n      event.preventDefault();\r\n      deleteUser(element.attributes[\"data-id\"].value);\r\n      const row = element.parentNode.parentNode;\r\n      row.parentNode.removeChild(row);\r\n    };\r\n  });\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/home.js\n **/","// *** IMPORTANT ***\r\n// think of this file as a javasript version of the repository pattern\r\n// we are abstracting our web api from our application\r\n// this gives us one place to hanle all our ajax calls\r\n\r\n// this polyfill ensures this code will run in browsers that don't support fetch natively\r\nimport 'whatwg-fetch';\r\n\r\n// this allows the url to change based on environment. i.e. development, qa, production\r\nimport getBaseUrl from './baseUrl';\r\nconst baseUrl = getBaseUrl();\r\n\r\n// we are only exposing 1 public function\r\nexport function getUsers() {\r\n\treturn get('users');\r\n}\r\n\r\nexport function deleteUser(id) {\r\n\treturn del(`users/${id}`);\r\n}\r\n\r\n// private\r\n// this is the call that uses fetch\r\n// all the fetch calls, promise resolution, and error handling are abstracted away behind this call.\r\nfunction get(url) {\r\n\treturn fetch(baseUrl + url).then(onSuccess, onError);\r\n}\r\n\r\n// we can't name this 'delete' because delete is a reserved word\r\nfunction del(url) {\r\n\tconst request = new Request(baseUrl + url, {\tmethod: 'DELETE'\t});\r\n\r\n\treturn fetch(request).then(onSuccess, onError);\r\n}\r\n\r\n// private\r\nfunction onSuccess(response) {\r\n\treturn response.json();\r\n}\r\n\r\n// private\r\nfunction onError(error) {\r\n\tconsole.log(error); // eslint-disable-line no-console\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/userApi.js\n **/","// we want the application to inteligently point to the proper url when developing/production\r\n// development: point to the mock api\r\n// production: point to the api in express\r\n// this will look at the host name to determine if the application is running in development\r\n// if yes: \tit will point to our mock api hosted on port 3001\r\n// if no: \tit will point to the production api we setup in express\r\nexport default function getBaseUrl() {\r\n\treturn getQueryStringParameterByName('useMockApi') ? 'http://localhost:3000' : 'https://sheltered-sea-32779.herokuapp.com/';\r\n}\r\n\r\n// there are eaiser ways to do this. Use JQuery\r\nfunction getQueryStringParameterByName(name, url) {\r\n  if (!url) url = window.location.href;\r\n  name = name.replace(/[\\[\\]]/g, \"\\\\$&\");\r\n  var regex = new RegExp(\"[?&]\" + name + \"(=([^&#]*)|&|#|$)\"),\r\n      results = regex.exec(url);\r\n  if (!results) return null;\r\n  if (!results[2]) return '';\r\n  return decodeURIComponent(results[2].replace(/\\+/g, \" \"));\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/api/baseUrl.js\n **/"],"sourceRoot":""}